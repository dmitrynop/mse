#!/usr/bin/env ruby

require 'aws-sdk'
require 'pry'
require 'tty-prompt'

prompt = TTY::Prompt.new

backup = 'backup.sql'.freeze
backup_gz = "#{backup}.gz".freeze

pg_host = 'db'
pg_user = ENV.fetch('POSTGRES_USER')
pg_pass = ENV.fetch('POSTGRES_PASSWORD')
pg_db = ENV.fetch('POSTGRES_DB')

credentials = Aws::Credentials.new(
  ENV.fetch('S3_ACCESS_KEY_ID'),
  ENV.fetch('S3_SECRET_ACCESS_KEY')
)

s3 = Aws::S3::Resource.new(
  region: ENV.fetch('S3_REGION'),
  credentials: credentials
)
bucket = s3.bucket(ENV.fetch('S3_BUCKET'))

available_backups = bucket.objects(prefix: 'backups/db/').reject do |obj|
  obj.key =~ %r{/$}
end
chosen_key = prompt.select('What backup do you want to restore from?', available_backups.map(&:key))
url = bucket.object(chosen_key).presigned_url(:get, expires_in: 3600)

def ssh(cmd)
  username = ENV.fetch('SERVER_USERNAME')
  addr = ENV.fetch('SERVER_ADDR')

  `ssh #{username}@#{addr} -C "#{cmd}"`
end

def exec_on_pgbackups(cmd)
  puts `./bin/prod exec pgbackups sh -c "#{cmd}"`
end

puts 'Downloading backup file to the server...'
ssh("wget -O /tmp/#{backup_gz} '#{url}' > /dev/null")

puts 'Extracting...'
ssh("gzip -f -d /tmp/#{backup_gz}")

puts 'Applying...'
restore_cmd = "export PGPASSWORD=#{pg_pass} && pg_restore --clean -U #{pg_user} -h #{pg_host} -d #{pg_db} /mnt/backups/#{backup}"
exec_on_pgbackups(restore_cmd)
