#!/usr/bin/env ruby

require "aws-sdk"
require "pry"
require "tty-prompt"

prompt = TTY::Prompt.new

BUCKET=ENV.fetch("S3_BUCKET")
REGION=ENV.fetch("S3_REGION")
ACCESS_KEY_ID=ENV.fetch("S3_ACCESS_KEY_ID")
SECRET_ACCESS_KEY=ENV.fetch("S3_SECRET_ACCESS_KEY")

SERVER_USERNAME=ENV.fetch("SERVER_USERNAME")
SERVER_ADDR=ENV.fetch("SERVER_ADDR")

BACKUP_FILE="backup.sql"
BACKUP_GZ_FILE="#{BACKUP_FILE}.gz"
BACKUPS_HOST_PATH="/root/mse-production/backups"
BACKUPS_CONTAINER_PATH="/mnt/backups"

PG_USER=ENV.fetch("POSTGRES_USER")
PG_PASSWORD=ENV.fetch("POSTGRES_PASSWORD")
PG_DB=ENV.fetch("POSTGRES_DB")


credentials = Aws::Credentials.new(
  ACCESS_KEY_ID,
  SECRET_ACCESS_KEY,
)

s3 = Aws::S3::Resource.new(
  region: REGION,
  credentials: credentials,
)

bucket = s3.bucket("mse-production")

chosen_key = prompt.select("What backup do you want to restore from?", bucket.objects.map(&:key))

url = bucket.object(chosen_key).presigned_url(:get, expires_in: 3600)


def ssh(cmd)
  `ssh #{SERVER_USERNAME}@#{SERVER_ADDR} -C "#{cmd}"`
end

puts "\n\nDownloading backup file to the server..."
ssh("wget -O #{BACKUPS_HOST_PATH}/#{BACKUP_GZ_FILE} '#{url}'")

puts "\n\Extracting..."
ssh("gzip -f -d #{BACKUPS_HOST_PATH}/#{BACKUP_GZ_FILE}")

puts "\n\nApplying..."

restore_cmd="export PGPASSWORD=#{PG_PASSWORD} && psql -h db -U #{PG_USER} -d #{PG_DB} < #{BACKUPS_CONTAINER_PATH}/#{BACKUP_FILE}"
puts `./bin/prod exec pgbackups sh -c "#{restore_cmd}"`
